@using TicTacToe.Client.Models.Field;
@using TicTacToe.Client.Models.Users;
@using Newtonsoft.Json;

@page "/"

<h1>Tic Tac Toe!</h1>

<section>
	<table>
		<tbody>
			@for (int row = 0; row < 3; row++)
			{
				var cRow = row;
				<tr>
					@for (int column = 0; column < 3; column++)
					{
						var cColumn = column;
						<td @onclick="@(() => HandleOnBoardClick(cRow, cColumn))">
							@playfield.GetValue(row, column)
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
</section>
<section>
	@if (this.playfield.State.IsFinished)
	{
		<p>Game finished!</p>
		@if (this.playfield.State.EndState == EndState.Win)
		{
			<p>@this.playfield.State.Winner.Name wins!</p>
		}
		@if (this.playfield.State.EndState == EndState.Tie)
		{
			<p>It's a Tie!</p>
		}
	}
	<button @onclick="@(() => HandleOnResetClick())">Reset</button>
</section>
<section class="players">
	Players
	@foreach (var player in @playfield.Players)
	{
		<article class="player">@player.Name - @player.Mark</article>
	}

	Turn: @GetActivePlayerName()
</section>



@code {
	private Playfield playfield;

	protected override void OnParametersSet()
	{
		InitializeStart();
	}

	private void HandleOnBoardClick(int row, int column)
	{
		try
		{
			if (!playfield.State.IsFinished)
			{
				playfield.Move(row, column);
			}
		}
		catch (TicTacToe.Client.Exceptions.InvalidMoveException)
		{

		}
	}

	private void HandleOnResetClick()
	{
		this.playfield.Reset();
	}

	private string GetActivePlayerName() 
	{
		return this.playfield.State.ActivePlayer.Name;
	}

	private void InitializeStart()
	{
		var players = InitializePlayers();

		var playfield = InititializeField(players);

		this.playfield = playfield;
		playfield.State.EndConditionReached += DisplayFinalScreen;
		playfield.Start();
	}

	private Players InitializePlayers()
	{
		var players = new Players
{
			new Player("Player 1", PlayerType.Human, TicTacToeMark.O),
			new Player("Player 2", PlayerType.Human, TicTacToeMark.X)
		};

		return players;
	}

	private Playfield InititializeField(Players players)
	{
		var playfield = new Playfield(players);

		return playfield;
	}

	private void DisplayFinalScreen(object sender, EventArgs e)
	{
		var args = e as EndGameEventArgs;
		Console.WriteLine("Game is Finished!");
	}
}